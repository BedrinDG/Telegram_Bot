const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");
require('dotenv').config();

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
        this.user = {};
        this.count = 0;
    }

    async start(){
        this.mode = "main";
        const text = this.loadMessage("main");
        await this.sendImage("main");
        await this.sendText(text);

        await this.showMainMenu({
            "start": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"
        });
    }

    async gpt(){
        this.mode = "gpt";
        const text = this.loadMessage("gpt");
        await this.sendImage("gpt");
        await this.sendText(text);
    }

    async gptDialog(message){
        const text = message.text;
        const myMessage = await this.sendText("–í—ã—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä—Å–ª–∞–Ω–æ ChatGPT. –û–∂–∏–¥–∞–π—Ç–µ...");
        const answer = await chatGptService.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text);
        await this.editText(myMessage, answer);
    }

    async date(){
        this.mode = "date";
        const text = this.loadMessage("date");
        await this.sendImage("date");
        await this.sendTextButtons(text, {
            "date_grande" : "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–µ–¥–µ",
            "date_robbie" : "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya" : "–ó–µ–Ω–¥–µ—è",
            "date_gosling" : "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy" : "–¢–æ–º –•–∞—Ä–¥–∏"
        });
    }

    async dateButtons(callbackQuery){
        const query = callbackQuery.data;
        await this.sendImage(query);
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ø—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–πü§û")

        const prompt = this.loadPrompt(query);
        chatGptService.setPrompt(prompt);
    }

    async dateDialog(message){
        const text = message.text;
        const myMessage = await this.sendText("–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...");
        const answer = await chatGptService.addMessage(text);
        await this.editText(myMessage, answer);
    }

    async message() {
        this.mode = "message";
        this.list = [];
        const text = this.loadMessage("message");
        await this.sendImage("message");
        await this.sendTextButtons(text,{
            "message_next" : "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date" : "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
        });
    }

    async messageButtons(callbackQuery){
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query);
        const userChatHistory = this.list.join("\n\n")

        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...");
        const answer = await chatGptService.sendQuestion(prompt, userChatHistory);
        await this.editText(myMessage, answer);
    }

    async messageDialog(message){
        const text = message.text;
        this.list.push(text);
    }

    async profile(){
        this.mode = "profile";
        const text = this.loadMessage("profile");
        await this.sendImage("profile");
        await this.sendText(text);

        this.user = {};
        this.count = 0;
        await this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
    }

    async profileDialog(message){
        const text = message.text;
        this.count++;
        if(this.count === 1){
            this.user["age"] = text;
            await this.sendText("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
        }else if(this.count === 2){
            this.user["occupation"] = text;
            await this.sendText("–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?");
        }else if(this.count === 3){
            this.user["hobby"] = text;
            await this.sendText("–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?");
        }else if(this.count === 4){
            this.user["annoys"] = text;
            await this.sendText("–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
        }else if(this.count === 5){
            this.user["goals"] = text;

            const prompt = this.loadPrompt("profile");
            const info = userInfoToString(this.user);

            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...");
            const answer = await chatGptService.sendQuestion(prompt, info);
            await this.editText(myMessage, answer);
        }
    }

    async opener(){
        this.mode = "opener";
        const text = this.loadMessage("opener");
        await this.sendImage("opener");
        await this.sendText(text);

        this.user = {};
        this.count = 0;
        await this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏?");
    }

    async openerDialog(message){
        const text = message.text;
        this.count++;

        if(this.count === 1){
            this.user["name"] = text;
            await  this.sendText("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
        }else if(this.count === 2){
            this.user["age"] = text;
            await  this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?");
        }else if(this.count === 3){
            this.user["handsome"] = text;
            await  this.sendText("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?");
        }else if(this.count === 4){
            this.user["occupation"] = text;
            await  this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
        }else if(this.count === 5){
            this.user["goals"] = text;

            const prompt = this.loadPrompt("opener");
            const info = userInfoToString(this.user);

            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –æ—É–ø–µ–Ω–µ—Ä–∞...");
            const answer = await chatGptService.sendQuestion(prompt, info);
            await this.editText(myMessage, answer);
        }
    }

    async hello(message) {
        if(this.mode === "gpt"){
            await this.gptDialog(message);
        }
        else if(this.mode === "date"){
            await this.dateDialog(message);
        }
        else if(this.mode === "message"){
            await this.messageDialog(message);
        }
        else if(this.mode === "profile"){
            await this.profileDialog(message);
        }
        else if(this.mode === "opener"){
            await this.openerDialog(message);
        }
    }
}
const chatGptService = new ChatGptService(process.env.CHATGPT_API_KEY);
const bot = new MyTelegramBot(process.env.TELEGRAM_BOT_API_KEYAPI_KEY);

bot.onCommand(/\/start/, bot.start);
bot.onCommand(/\/gpt/, bot.gpt);
bot.onCommand(/\/date/, bot.date);
bot.onCommand(/\/message/, bot.message);
bot.onCommand(/\/profile/, bot.profile);
bot.onCommand(/\/opener/, bot.opener);

bot.onTextMessage(bot.hello);
bot.onButtonCallback(/^date_.*/, bot.dateButtons);
bot.onButtonCallback(/^message_.*/, bot.messageButtons);